---
title: "Data Wrangling"
format: html
editor: visual
---

## Packages and Data

```{r}
#| label: install_packages

install.packages("data.table")
install.packages("tidyverse")
```

```{r}
#| label: library_function 

library(tidyverse)
library(knitr)
library(readxl)
library(data.table)
```

```{r}
#| label: reading_datasets

Corals_raw <- read_excel("Corals_raw.xlsx")
ITS2 <- read.csv("ITS2.csv")
Ty_superset_data_raw_KB <- read.csv("Ty_superset_data_raw_KB.csv")
```

## Cleaning Coral Data

```{r}
#| label: cleaning_corals_raw

fields <- c(
  "host_phylum", "host_class", "host_order",
  "host_family", "host_genus", "host_species", "location"
  )

# species labels to exclude → NA
exclude_species <- c("sp10", "sp 1", "sp4", "sp11", "sp 2", 
                     "sp2", "sp8", "sp5", "sp 6", "sp7", 
                     "sp1", "sp12", "sp3")

Corals_clean <- Corals_raw %>%
  # --- specific taxonomy fixes ---
  mutate(
    host_class = str_replace(host_class, "^Demospongia$", "Demospongiae"),
    
    host_order = case_when(
      host_order == "poecilosclerida" ~ "Actiniaria",   # lowercase only
      host_order == "Alcyonacea"     ~ "Malacalcyonacea",
      TRUE ~ host_order
    ),
    
    host_family = case_when(
      host_family == "Anthothelidae"     ~ "Alcyoniidae",
      host_family == "Pseudoceratinidae" ~ "Aplysinidae",
      TRUE ~ host_family
    ),
    
    host_genus = case_when(
      host_genus == "Tubastrea"      ~ "Tubastraea",
      host_genus == "Symphillia"     ~ "Lobophyllia",
      host_genus == "Symphyllia"     ~ "Lobophyllia",
      host_genus == "Porieties"      ~ "Porites",
      host_genus == "Pseudoceratina" ~ "Aiolochroia",
      TRUE ~ host_genus
    ),
    
    host_species = case_when(
      str_detect(host_species, "strigosa a$") ~ str_replace(host_species, "strigosa a$",
                                                            "strigosa"),
      str_detect(host_species, "strigosa b$") ~ str_replace(host_species, "strigosa b$",
                                                            "strigosa"),
      str_detect(host_species, "lutkeni$") ~ str_replace(host_species, "lutkeni$", "luetkeni"),
      str_detect(host_species, "cyatheria$") ~ str_replace(host_species, "cyatheria$",
                                                           "cytherea"),
      str_detect(host_species, "mesatarina$") ~ str_replace(host_species, "mesatarina$",
                                                            "mesenterina"),
      str_detect(host_species, "laborynthiformis$") ~ str_replace(host_species,
                                                                  "laborynthiformis$",
                                                                  "labyrinthiformis"),
      str_detect(host_species, "cylindricus$") ~ str_replace(host_species, "cylindricus$",
                                                             "cylindrus"),
      str_detect(host_species, "mirabilis$") ~ str_replace(host_species, "mirabilis$",
                                                           "auretenra"),
      str_detect(host_species, "homomalla$") ~ str_replace(host_species, "homomalla$",
                                                           "kuekenthali"),
      str_detect(host_species, "barbadensis$") ~ str_replace(host_species, "barbadensis$",
                                                             "arbuscula"),
      # --- Acropora ---
      host_genus == "Acropora" & host_species %in% c("sp 1", "sp1")  ~ "Acropora sp1",
      host_genus == "Acropora" & host_species %in% c("sp2", "sp 2") ~ "Acropora sp2",
      host_genus == "Acropora" & host_species == "sp3"              ~ "Acropora sp3",
      host_genus == "Acropora" & host_species == "sp4"              ~ "Acropora sp4",
      host_genus == "Acropora" & host_species == "sp5"              ~ "Acropora sp5",
      host_genus == "Acropora" & host_species == "sp 6"             ~ "Acropora sp6",
      host_genus == "Acropora" & host_species == "sp7"              ~ "Acropora sp7",
      host_genus == "Acropora" & host_species == "sp8"              ~ "Acropora sp8",
      host_genus == "Acropora" & host_species == "sp10"             ~ "Acropora sp9",
      host_genus == "Acropora" & host_species == "sp11"             ~ "Acropora sp10",
      host_genus == "Acropora" & host_species == "sp12"             ~ "Acropora sp11",
      
      # --- Montipora ---
      host_genus == "Montipora" & host_species %in% c("sp1", "sp 1") ~ "Montipora sp1",
      
      # --- Galaxea ---
      host_genus == "Galaxea" & host_species == "sp1" ~ "Galaxea sp1",
      TRUE ~ host_species
      ),
 
   # --- fix taxa for species purpurea ---
    host_order  = if_else(str_detect(host_species, "purpurea$"), "Scleractinia", host_order),
    host_family = if_else(str_detect(host_species, "purpurea$"), "Leptastreidae", host_family),
    host_genus  = if_else(str_detect(host_species, "purpurea$"), "Leptastrea", host_genus), 

   # --- fix taxa for species ruetzleri ---
    host_order  = if_else(str_detect(host_species, "ruetzleri$"), "Scopalinida", host_order),
    host_family = if_else(str_detect(host_species, "ruetzleri$"), "Scopalinidae", host_family),
    host_genus  = if_else(str_detect(host_species, "ruetzleri$"), "Scopalina", host_genus),
   
   # --- fix taxa for species anchorata ---
    host_family = if_else(str_detect(host_species, "helwigi$"), "Desmacididae", host_family),
    host_genus  = if_else(str_detect(host_species, "helwigi$"), "Desmapsamma", host_genus),
    host_species = if_else(str_detect(host_species, "helwigi$"), "anchorata", host_species), 
   
    # --- known location fixes ---
    location = case_when(
      location == "Carmabi Arks"   ~ "Curaçao",
      location == "Carmabi"        ~ "Curaçao",
      location == "Marriot"       ~ "Curaçao",
      location == "Water Factory"  ~ "Curaçao",
      location == "Radio Island"   ~ "Curaçao",
      location == "Cura√ßao"       ~ "Curaçao",
      str_detect(location, "Hawai") ~ "Hawaii",   # catch all variants
      location == "NA"             ~ NA_character_,
      TRUE ~ location
      ), 
  
    #fixing bleaching column
    bleaching = as.character(bleaching),       # drop factor levels
    bleaching = case_when(
      bleaching == "NB/Pale" ~ "Pale",
      bleaching %in% c("NA", "UnID") ~ NA_character_,  # keep earlier cleanup
      TRUE ~ bleaching
    ), 
   
    #fixing symbiont potential column
    `symbiont potential` = as.character(`symbiont potential`),   # drop factor levels
    `symbiont potential` = case_when(
      `symbiont potential` == "Sym"          ~ "Symbiotic",
      `symbiont potential` == "Apo"          ~ "Aposymbiotic",
      `symbiont potential` == "Facultative"  ~ "Facultative",
      `symbiont potential` %in% c("NA", "UnID") ~ NA_character_,
      TRUE ~ `symbiont potential`
    ),
   
   #fixing individual symbiosis column
   `individual symbiosis` = as.character(`individual symbiosis`),   # drop factor levels
    `individual symbiosis` = case_when(
      `individual symbiosis` == "Sym"       ~ "Symbiotic",         # unify short form
      `individual symbiosis` == "Symbiotic" ~ "Symbiotic",
      `individual symbiosis` == "Aposymbiotic" ~ "Aposymbiotic",
      `individual symbiosis` %in% c("NA", "UnID") ~ NA_character_, # convert NA strings
      TRUE ~ `individual symbiosis`
    )
  ) %>%
  # --- general cleanup across all metadata ---
  mutate(across(all_of(fields), ~ {
    x <- str_trim(.)
    x <- str_replace_all(x, "[\u00A0†]", "")  # remove NBSP + dagger
    x <- str_replace_all(x, "\\?", "")        # strip stray question marks
    x <- str_squish(x)                        # collapse multiple spaces
    x <- na_if(x, "NA")                       # literal "NA" → NA
    x <- na_if(x, "Nan")                      # literal "Nan" → NA
    x <- na_if(x, "UnID")                     # literal "UnID" → NA
    x <- na_if(x, "")                         # empty → NA
    x
  })) %>%
  filter(!is.na(host_phylum))  # drop rows with missing phylum

# Remove columns run, plate, and set
Corals_clean <- Corals_clean %>%
  select(-run, -plate, -type)
```

```{r}
#| label: checking_corals_clean

unique(Corals_clean$host_phylum)

unique(Corals_clean$location)

Corals_clean %>%
  count(host_phylum, sort = TRUE)

```

```{r}
unique(Corals_clean$host_class)
```

```{r}
unique(Corals_clean$host_order)
```

```{r}
unique(Corals_clean$host_family)
```

```{r}
unique(Corals_clean$host_genus)
```

```{r}
unique(Corals_clean$host_species)
```

```{r}
unique(Corals_clean$bleaching)
```

```{r}
unique(Corals_clean$`symbiont potential`)
```

```{r}
unique(Corals_clean$`individual symbiosis`)
```

```{r}
unique(Corals_clean$location)
```

## Classification Table Code

```{r}
#| label: making_taxa_df

library(dplyr)

# Build a taxonomy dataframe with all available levels
taxonomy_df <- Corals_clean %>%
  dplyr::select(
    host_phylum,
    host_class,
    host_order,
    host_family,
    host_genus,
    host_species
  ) %>%
  distinct() %>%   # keep only unique combinations
  arrange(
    host_phylum,
    host_class,
    host_order,
    host_family,
    host_genus,
    host_species
  )

```

## Richness of metadata

```{r}
#| label: summary_table_metadata

# Metadata fields of interest
fields <- c(
  "host_phylum", "host_class", "host_order",
  "host_family", "host_genus", "host_species", "location"
)

# Build summary table
summary_table <- tibble(
  Metadata = fields,
  Richness = map_int(Corals_clean[fields], ~ n_distinct(.[!is.na(.)])),  # unique values excluding NA
  Present  = map_int(Corals_clean[fields], ~ sum(!is.na(.)))             # non-NA entries
)

print(summary_table)
```

## Cleaning ITS2

```{r}
#| label: cleaning_ITS2_data

ITS2_clean <- ITS2 %>%
  mutate(across(c(ITS2Genus, ITS2.Letter), as.character), 
    ITS2Genus   = na_if(as.character(ITS2Genus), ""),
    ITS2.Letter = na_if(as.character(ITS2.Letter), ""), 
    Species = as.character(Species), 
    Genus = as.character(Genus), 
    Mass.Spec.File = str_remove(Mass.Spec.File, "\\.mzXML$"), # remove only at end
    Species = case_when(
      Species == "Acropora_cyatheria"     ~ "cytherea",
      Species == "Acropora_sp10"          ~ "Acropora sp9",
      Species == "Acropora_sp11"          ~ "Acropora sp10",
      Species == "Acropora_sp12"          ~ "Acropora sp11",
      Species == "Acropora_sp1"           ~ "Acropora sp1",
      Species == "Acropora_sp2"           ~ "Acropora sp2",
      Species == "Acropora_sp3"           ~ "Acropora sp3",
      Species == "Acropora_sp4"           ~ "Acropora sp4",
      Species == "Acropora_sp5"           ~ "Acropora sp5",
      Species == "Acropora_sp6"           ~ "Acropora sp6",
      Species == "Acropora_sp7"           ~ "Acropora sp7",
      Species == "Acropora_sp8"           ~ "Acropora sp8",
      Species == "Montipora_sp1"          ~ "Montipora sp1",
      Species == "Dendrogyra_cylindricus" ~ "cylindrus",
      Species %in% c("Diploria_laborynthiformis", "Diploria_Laborynthiformis") ~ "labyrinthiformis",
      Species == "Madracis_mirabilis"            ~ "auretenra",
      Species == "Pseudodiploria_strigosa_a"     ~ "strigosa",
      Species == "Pseudodiploria_strigosa_b"     ~ "strigosa",
      TRUE ~ Species),
    # --- Genus corrections ---
    Genus = case_when(
      Genus == "Symphyllia" ~ "Lobophyllia",
      Genus == "Terbinaria" ~ "Turbinaria",
      Genus == "Tubastrea"  ~ "Tubastraea",
      TRUE ~ Genus
    ), 
    )

#Reorder columns 
ITS2_clean <- ITS2_clean %>%  
  select(ITS2.type.profile, X, Mass.Spec.File, Genus, Species, everything())

#Removing Genus from Species 
ITS2_clean <- ITS2_clean %>%
  mutate(
    Species = str_replace(Species, ".*_", "")   # keep only text after last "_"
  )

#Making unknown values NA
ITS2_clean <- ITS2_clean %>%
  mutate(
    Species = ifelse(
      Species %in% c(
        "Unknown", "sp3", "sp4", "sp5", "sp6", "sp", "1", "sp1",
        "2", "3", "4", "5", "spp", "", "sp7", "sp8", "sp9",
        "sp10", "sp2", "Blank", "Orbicella"
      ),
      NA, Species
    ), 
    Genus = ifelse(
      Genus %in% c("Unknown", "Blank", ""), 
      NA, Genus
    )
  )

#Removing levels from Location 
ITS2_clean <- ITS2_clean %>%
  mutate(Location = as.character(Location))

#Cleaning location column 
ITS2_clean <- ITS2_clean %>%
  mutate(
    Location = case_when(
      Location %in% c("#N/A", "", "Blank") ~ NA_character_,
      Location == "SL"  ~ "Sri Lanka",
      Location == "CUR" ~ "Curaçao",
      TRUE ~ Location
    )
  )

#Cleaning Phenotype column 
ITS2_clean <- ITS2_clean %>%
  mutate(
    Phenotype = as.character(Phenotype),   # remove factor levels
    Phenotype = case_when(
      Phenotype %in% c("Unknown", "Blank", "") ~ NA_character_,
      Phenotype == "0"                     ~ "NB",         # 0 → NB (Not Bleached)
      Phenotype == "BL"                    ~ "B",
      Phenotype %in% c("pale", "Pale")     ~ "Pale",
      TRUE ~ Phenotype
    )
  )

```

```{r}
unique(ITS2_clean$Species)
```

```{r}
unique(ITS2_clean$Genus)
```

```{r}
unique(ITS2_clean$Location)
```

```{r}
unique(ITS2_clean$ITS2Genus)
```

```{r}
unique(ITS2_clean$ITS2.Letter)
```

```{r}
unique(ITS2_clean$Phenotype)
```

```{r}
#| label: made_unique_genus_species_table
unique_genus_species <- ITS2_clean %>%
  select(Genus, Species) %>%
  distinct() %>%
  arrange(Genus, Species) %>%
  as.data.frame()

```

## Richness of ITS2

```{r}
#| label: richness_of_ITS2

fields <- c("ITS2Genus", "ITS2.Letter")

summary_table_ITS2 <- tibble(
  Metadata = fields,
  Richness = map_int(ITS2_clean[fields], ~ n_distinct(.[!is.na(.)])),  # unique non-NA values
  Present  = map_int(ITS2_clean[fields], ~ sum(!is.na(.)))             # non-NA entries
)

print(summary_table_ITS2)
```

## Saving corals and ITS2 as CSV

```{r}
write.csv(ITS2_clean, "ITS2_clean.csv", row.names = FALSE)
write.csv(Corals_clean, "Corals_clean.csv", row.names = FALSE)
```
