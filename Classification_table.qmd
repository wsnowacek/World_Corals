---
title: "Data Wrangling"
format: html
editor: visual
---

## Packages and Data

```{r}
#| label: install_packages

install.packages("data.table")
install.packages("tidyverse")
```

```{r}
#| label: library_function 

library(tidyverse)
library(knitr)
library(readxl)
library(data.table)
```

```{r}
#| label: reading_datasets

Corals_raw <- read_excel("Corals_raw.xlsx")
ITS2 <- read.csv("ITS2.csv")
Ty_superset_data_raw_KB <- read.csv("Ty_superset_data_raw_KB.csv")
```

## Classification Table Code

```{r}
#| label: cleaning_corals_raw

# 1. Clean up host_phylum
Corals_clean <- Corals_raw %>%
  mutate(
    # Normalize whitespace and stray characters (like \xa0 or †)
    host_phylum = str_trim(host_phylum),
    host_phylum = str_replace_all(host_phylum, "[\u00A0†]", ""),  # remove NBSP or dagger-like marks
    host_phylum = str_trim(host_phylum),

   # Replace unwanted string values with NA
    host_phylum = ifelse(host_phylum %in% c("UnID", "Nan", "NA", ""), NA, host_phylum),
    location = case_when(
      location == "Carmabi Arks" ~ "Carmabi",
      location == "Cura√ßao"     ~ "Curaçao",
      str_detect(location, "Hawai") ~ "Hawaii",   # catch all variants,
      location == "NA"           ~ NA_character_,  # handle string "NA" properly
      TRUE ~ location
    )) %>%
  # Drop rows where host_phylum is NA
  filter(!is.na(host_phylum))

```

```{r}
#| label: checking_corals_clean

unique(Corals_clean$host_phylum)

unique(Corals_clean$location)

Corals_clean %>%
  count(host_phylum, sort = TRUE)

```

```{r}
#| label: summary_table_metadata

fields <- c(
  "host_phylum", "host_class", "host_order", "host_family", "host_genus", "host_species", "location"
  )

# Subset dataframe to relevant fields
dt_subset <- Corals_clean %>%
  select(all_of(fields))

# Create summary table with each field as a row
summary_table <- tibble(
  Metadata = fields,
  Richness = map_int(dt_subset, ~ n_distinct(.[!is.na(.)])),   # exclude NA in richness
  Present  = map_int(dt_subset, ~ sum(!is.na(.)))              # count non-NA entries
)

print(summary_table)
```

```{r}
# 2. Keep only metabolite columns (those not starting with "x")
# Assuming metabolite columns DO start with "x"
metabolite_data <- Corals_clean %>%
  dplyr::select(dplyr::starts_with("x")) %>%
  mutate(across(everything(), as.numeric))

```

```{r}
taxonomy_list <- Corals_clean %>%
  dplyr::select(
    host_phylum, host_class, host_order,
    host_family, host_genus, host_species
  ) %>%
  distinct() %>%
  arrange(
    host_phylum, host_class, host_order,
    host_family, host_genus, host_species
  )

# Print nested taxonomy: Phylum → Class → Order → Family → Genus → Species
for(p in unique(taxonomy_list$host_phylum)) {
  cat("\nPhylum:", p, "\n")
  classes <- taxonomy_list %>%
    filter(host_phylum == p) %>%
    pull(host_class) %>%
    unique() %>%
    na.omit()
  
  for(c in classes) {
    cat("  Class:", c, "\n")
    orders <- taxonomy_list %>%
      filter(host_phylum == p, host_class == c) %>%
      pull(host_order) %>%
      unique() %>%
      na.omit()
    
    for(o in orders) {
      cat("    Order:", o, "\n")
      families <- taxonomy_list %>%
        filter(host_phylum == p, host_class == c, host_order == o) %>%
        pull(host_family) %>%
        unique() %>%
        na.omit()
      
      for(f in families) {
        cat("      Family:", f, "\n")
        genera <- taxonomy_list %>%
          filter(host_phylum == p, host_class == c, host_order == o, host_family == f) %>%
          pull(host_genus) %>%
          unique() %>%
          na.omit()
        
        for(g in genera) {
          cat("        Genus:", g, "\n")
          species <- taxonomy_list %>%
            filter(
              host_phylum == p, host_class == c,
              host_order == o, host_family == f,
              host_genus == g
            ) %>%
            pull(host_species) %>%
            unique() %>%
            na.omit()
          
          for(s in species) {
            cat("          Species:", s, "\n")
          }
        }
      }
    }
  }
}


```

```{r}
library(dplyr)

# Build a taxonomy dataframe with all available levels
taxonomy_df <- Corals_clean %>%
  dplyr::select(
    host_phylum,
    host_class,
    host_order,
    host_family,
    host_genus,
    host_species
  ) %>%
  distinct() %>%   # keep only unique combinations
  arrange(
    host_phylum,
    host_class,
    host_order,
    host_family,
    host_genus,
    host_species
  )

```
