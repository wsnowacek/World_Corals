---
title: "PERMANOVA"
format: html
---

## Library and Data

```{r}
#| label: library_load

library(tidyverse)
library(knitr)
library(readxl)
library(data.table)
library(vegan)
```

```{r}
#| label: read_csvs

Corals_raw <- read_excel("Corals_raw.xlsx")
ITS2 <- read.csv("ITS2.csv")
Corals_clean <- read.csv("Corals_clean.csv")
ITS2_clean   <- read.csv("ITS2_clean.csv")
met_summary_coral_only <- read.csv("met_summary_coral_only.csv")
```

## PERMANOVA

\`\`\`{r\[0\]}

# Required packages

```{r}
library(dplyr)
library(vegan)
```

```{r}
# Required packages
if (!requireNamespace("vegan", quietly = TRUE)) install.packages("vegan")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
library(dplyr)
library(vegan)

# -------------------- 1) Setup coral_status and metadata --------------------
# create coral_status if not present
if (!("coral_status" %in% names(Corals_clean))) {
  Corals_clean <- Corals_clean %>%
    mutate(coral_status = ifelse(grepl("Scleractinia", host_order, ignore.case = TRUE),
                                 "Coral", "Non-coral"),
           coral_status = factor(coral_status))
}

metadata_cols <- c("location", "host_phylum", "host_class", "host_order",
                   "host_genus", "host_species", "bleaching", "symbiont.potential")

# -------------------- 2) Select metabolite columns (those starting with "x") ----
metabolite_cols <- grep("^x", names(Corals_clean), value = TRUE)
cat("Found", length(metabolite_cols), "metabolite columns (starting with 'x').\n")
if (length(metabolite_cols) == 0) stop("No metabolite columns starting with 'x' found. Check naming.")

# ensure metabolite columns are numeric
for (mc in metabolite_cols) {
  if (!is.numeric(Corals_clean[[mc]])) {
    Corals_clean[[mc]] <- as.numeric(as.character(Corals_clean[[mc]]))
  }
}

# full raw metabolite matrix (samples x features)
met_mat_raw <- as.matrix(Corals_clean %>% select(all_of(metabolite_cols)))

# -------------------- 3) Build abundance (Hellinger) and presence/absence matrices ----
# Hellinger transform (recommended for many zero-heavy abundance matrices)
# decostand requires community matrix with non-negative entries
if (any(met_mat_raw < 0, na.rm = TRUE)) stop("Negative values in metabolite matrix — check data.")
met_mat_hell <- decostand(met_mat_raw, method = "hellinger")  # Hellinger

# Presence/absence matrix (ubiquity)
met_mat_pa <- (met_mat_raw > 0) * 1  # 0/1

cat("Metabolite matrix dims (samples x metabolites):", dim(met_mat_raw), "\n")
cat("Hellinger matrix dims:", dim(met_mat_hell), "\n")
cat("Presence/absence matrix dims:", dim(met_mat_pa), "\n")

# optional: set rownames from sample_id if present
if ("sample_id" %in% names(Corals_clean)) {
  rownames(met_mat_raw) <- rownames(met_mat_hell) <- rownames(met_mat_pa) <- Corals_clean$sample_id
}

# Build metadata_all (used for subsetting)
metadata_all <- Corals_clean %>% select(all_of(metadata_cols)) %>% mutate(coral_status = Corals_clean$coral_status)

# -------------------- 4) Overall betadisper checks (on full sets, not subsetted) ----
# Bray-Curtis distance on Hellinger data (abundance)
bc_full <- vegdist(met_mat_hell, method = "bray")
# Jaccard distance on presence/absence (ubiquity)
jac_full <- vegdist(met_mat_pa, method = "jaccard")

cat("\nOverall Coral status counts:\n"); print(table(metadata_all$coral_status))

# Betadisper for abundance (Hellinger -> Bray)
if (length(unique(metadata_all$coral_status)) > 1) {
  bd_abund <- betadisper(bc_full, metadata_all$coral_status)
  cat("\nBetadisper (abundance; Bray) summary:\n"); print(bd_abund)
  cat("\nBetadisper permutation test (abundance):\n"); print(permutest(bd_abund, permutations = 999))
}

# Betadisper for ubiquity (presence -> Jaccard)
if (length(unique(metadata_all$coral_status)) > 1) {
  bd_pa <- betadisper(jac_full, metadata_all$coral_status)
  cat("\nBetadisper (presence; Jaccard) summary:\n"); print(bd_pa)
  cat("\nBetadisper permutation test (presence):\n"); print(permutest(bd_pa, permutations = 999))
}

# -------------------- 5) Loop per variable: run PERMANOVA on max samples per test ----
vars_to_test <- metadata_cols

abund_results <- list()
pa_results <- list()

for (v in vars_to_test) {
  message("\n--- Testing variable: ", v, " ---")
  # subset only on coral_status and the tested variable
  keep_mask <- complete.cases(metadata_all[, c("coral_status", v), drop = FALSE])
  n_keep <- sum(keep_mask)
  message("Samples used for this test: ", n_keep, " (dropped ", nrow(Corals_clean) - n_keep, ")")
  if (n_keep < 3) {
    warning("Too few samples for variable ", v, " — skipping both tests.")
    next
  }
  
  # subset matrices and metadata
  met_abund_sub <- met_mat_hell[keep_mask, , drop = FALSE]
  met_pa_sub    <- met_mat_pa[keep_mask, , drop = FALSE]
  meta_sub      <- metadata_all[keep_mask, , drop = FALSE]
  
  # ensure coral_status is factor
  meta_sub$coral_status <- factor(meta_sub$coral_status)
  # coerce tested var to factor if character
  if (is.character(meta_sub[[v]])) meta_sub[[v]] <- factor(meta_sub[[v]])
  
  # skip if tested var has <2 levels in subset
  if (is.factor(meta_sub[[v]]) && length(levels(meta_sub[[v]])) < 2) {
    warning("Variable ", v, " has <2 levels after subsetting — skipping.")
    next
  }
  
  # ---------- Abundance-based PERMANOVA (Hellinger -> Bray) ----------
  set.seed(42)
  fmla_abund <- as.formula(paste("met_abund_sub ~ coral_status +", v))
  ad_abund <- tryCatch({
    adonis2(fmla_abund, data = meta_sub, permutations = 999, method = "bray")
  }, error = function(e) {
    warning("adonis2 (abundance) failed for ", v, ": ", conditionMessage(e)); return(NULL)
  })
  if (!is.null(ad_abund)) {
    ad_df <- as.data.frame(ad_abund)
    rn <- rownames(ad_df)
    # extract coral_status row if present
    if ("coral_status" %in% rn) {
      r <- ad_df["coral_status", , drop = FALSE]
      abund_results[[length(abund_results) + 1]] <- data.frame(
        tested_variable = v, term = "coral_status",
        Df = as.numeric(r$Df), SumOfSqs = as.numeric(r$SumOfSqs),
        R2 = as.numeric(r$R2), F = as.numeric(r$F), Pr = as.numeric(r$`Pr(>F)`),
        stringsAsFactors = FALSE
      )
    }
    # extract tested variable row (or fallback to other non-residual rows)
    if (v %in% rn) {
      r2 <- ad_df[v, , drop = FALSE]
      abund_results[[length(abund_results) + 1]] <- data.frame(
        tested_variable = v, term = v,
        Df = as.numeric(r2$Df), SumOfSqs = as.numeric(r2$SumOfSqs),
        R2 = as.numeric(r2$R2), F = as.numeric(r2$F), Pr = as.numeric(r2$`Pr(>F)`),
        stringsAsFactors = FALSE
      )
    } else {
      other_rows <- setdiff(rn, c("coral_status", "Residual", "Total"))
      for (or in other_rows) {
        r_or <- ad_df[or, , drop = FALSE]
        abund_results[[length(abund_results) + 1]] <- data.frame(
          tested_variable = v, term = or,
          Df = as.numeric(r_or$Df), SumOfSqs = as.numeric(r_or$SumOfSqs),
          R2 = as.numeric(r_or$R2), F = as.numeric(r_or$F), Pr = as.numeric(r_or$`Pr(>F)`),
          stringsAsFactors = FALSE
        )
      }
    }
  }
  
  # ---------- Ubiquity-based PERMANOVA (presence/absence -> Jaccard) ----------
  set.seed(42)
  fmla_pa <- as.formula(paste("met_pa_sub ~ coral_status +", v))
  ad_pa <- tryCatch({
    adonis2(fmla_pa, data = meta_sub, permutations = 999, method = "jaccard")
  }, error = function(e) {
    warning("adonis2 (presence/absence) failed for ", v, ": ", conditionMessage(e)); return(NULL)
  })
  if (!is.null(ad_pa)) {
    ad_df2 <- as.data.frame(ad_pa)
    rn2 <- rownames(ad_df2)
    if ("coral_status" %in% rn2) {
      r <- ad_df2["coral_status", , drop = FALSE]
      pa_results[[length(pa_results) + 1]] <- data.frame(
        tested_variable = v, term = "coral_status",
        Df = as.numeric(r$Df), SumOfSqs = as.numeric(r$SumOfSqs),
        R2 = as.numeric(r$R2), F = as.numeric(r$F), Pr = as.numeric(r$`Pr(>F)`),
        stringsAsFactors = FALSE
      )
    }
    if (v %in% rn2) {
      r2 <- ad_df2[v, , drop = FALSE]
      pa_results[[length(pa_results) + 1]] <- data.frame(
        tested_variable = v, term = v,
        Df = as.numeric(r2$Df), SumOfSqs = as.numeric(r2$SumOfSqs),
        R2 = as.numeric(r2$R2), F = as.numeric(r2$F), Pr = as.numeric(r2$`Pr(>F)`),
        stringsAsFactors = FALSE
      )
    } else {
      other_rows <- setdiff(rn2, c("coral_status", "Residual", "Total"))
      for (or in other_rows) {
        r_or <- ad_df2[or, , drop = FALSE]
        pa_results[[length(pa_results) + 1]] <- data.frame(
          tested_variable = v, term = or,
          Df = as.numeric(r_or$Df), SumOfSqs = as.numeric(r_or$SumOfSqs),
          R2 = as.numeric(r_or$R2), F = as.numeric(r_or$F), Pr = as.numeric(r_or$`Pr(>F)`),
          stringsAsFactors = FALSE
        )
      }
    }
  }
}

# -------------------- 6) Combine & save results --------------------
abund_table <- if (length(abund_results) > 0) do.call(rbind, abund_results) else data.frame()
pa_table    <- if (length(pa_results) > 0)    do.call(rbind, pa_results)    else data.frame()

# tidy ordering
if (nrow(abund_table) > 0) abund_table <- abund_table %>% arrange(tested_variable, desc(term == "coral_status"))
if (nrow(pa_table) > 0)    pa_table    <- pa_table %>% arrange(tested_variable, desc(term == "coral_status"))

write.csv(abund_table, "permanova_abundance_hellinger_bray_results.csv", row.names = FALSE)
write.csv(pa_table,    "permanova_ubiquity_presence_jaccard_results.csv", row.names = FALSE)

cat("\nSaved abundance results to 'permanova_abundance_hellinger_bray_results.csv'\n")
cat("Saved ubiquity (presence/absence) results to 'permanova_ubiquity_presence_jaccard_results.csv'\n")

# Print short previews
cat("\nAbundance-based results (top rows):\n"); print(head(abund_table))
cat("\nUbiquity-based results (top rows):\n"); print(head(pa_table))

# -------------------- 7) Notes (printed) ------------------------------------
cat("\nNotes:\n")
cat("- Abundance test: Hellinger transform -> Bray–Curtis distance (good for abundance + many zeros).\n")
cat("- Ubiquity test: presence/absence -> Jaccard distance (asks whether presence/absence of metabolites differs).\n")
cat("- Each test uses maximum samples for that variable by only dropping rows missing coral_status or that variable.\n")
cat("- Check betadisper outputs above: if dispersion differs between groups, interpret PERMANOVA p-values cautiously.\n")

```

```{r}
# -------------------- 8) Per-metabolite ubiquity summary --------------------

# Check that the metabolite matrix exists
if (!exists("met_mat_raw")) {
  stop("met_mat_raw (metabolite matrix) not found. Run the PERMANOVA setup first.")
}

# presence/absence matrix (already defined earlier)
met_pa <- (met_mat_raw > 0) * 1  # 0/1

# Make sure group variable exists and matches the same rows
coral_status_vec <- Corals_clean$coral_status
if (is.null(coral_status_vec)) stop("coral_status column missing in Corals_clean.")

# Get counts of coral vs non-coral samples
n_coral <- sum(coral_status_vec == "Coral", na.rm = TRUE)
n_non   <- sum(coral_status_vec == "Non-coral", na.rm = TRUE)
cat("Coral samples:", n_coral, "  Non-coral samples:", n_non, "\n")

# Compute per-metabolite ubiquity (% presence in group)
ubiq_df <- data.frame(
  metabolite = metabolite_cols,
  coral_present = colSums(met_pa[coral_status_vec == "Coral", , drop = FALSE], na.rm = TRUE),
  noncoral_present = colSums(met_pa[coral_status_vec == "Non-coral", , drop = FALSE], na.rm = TRUE)
)

ubiq_df <- ubiq_df %>%
  mutate(
    coral_percent = 100 * coral_present / n_coral,
    noncoral_percent = 100 * noncoral_present / n_non,
    total_present = coral_present + noncoral_present,
    total_percent = 100 * total_present / (n_coral + n_non),
    coral_minus_noncoral = coral_percent - noncoral_percent
  ) %>%
  arrange(desc(coral_minus_noncoral))  # rank by coral-specificity

# write CSV
write.csv(ubiq_df, "metabolite_ubiquity_summary.csv", row.names = FALSE)
cat("\nSaved per-metabolite ubiquity summary to 'metabolite_ubiquity_summary.csv'\n")

# preview top and bottom metabolites
cat("\nTop 10 coral-specific metabolites:\n")
print(head(ubiq_df, 10))

cat("\nTop 10 non-coral-specific metabolites:\n")
print(tail(ubiq_df, 10))

```

```{r}
library(ggplot2)

ggplot(ubiq_df, aes(x = coral_minus_noncoral)) +
  geom_histogram(bins = 60, fill = "steelblue") +
  theme_minimal(base_size = 14) +
  labs(title = "Distribution of Coral vs Non-coral Metabolite Specificity",
       x = "Coral - Non-coral ubiquity difference (%)",
       y = "Number of metabolites")

```
