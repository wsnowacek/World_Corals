---
title: "Preliminary_graphs"
format: html
editor: visual
---

## Library and Data

```{r}
#| label: library_function 

library(tidyverse)
library(knitr)
library(readxl)
library(data.table)
```

```{r}
#| label: read_csvs

Corals_raw <- read_excel("Corals_raw.xlsx")
ITS2 <- read.csv("ITS2.csv")
Corals_clean <- read.csv("Corals_clean.csv")
ITS2_clean   <- read.csv("ITS2_clean.csv")
```

## Richness Graphs

```{r}
#| label: Overall_Species_Richness_per_Location

# Overall species richness per location (exclude NA)
location_richness <- Corals_clean %>%
  filter(!is.na(location)) %>%
  group_by(location) %>%
  summarise(Richness = n_distinct(host_species), .groups = "drop")

# Bar plot with styling
ggplot(location_richness, aes(x = factor(location, 
                                         levels = c("Hawaii", "Sri Lanka", "Curaçao")),
                              y = Richness, fill = location)) +
  geom_col() +
  labs(title = "Overall Species Richness per Location",
       x = "Location",
       y = "Number of Unique Species") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.title = element_text(size = 14),
    axis.text  = element_text(size = 12),
    legend.position = "none"  # hide redundant legend since bars already labeled
  )
```

```{r}
#| label: Corals_Species_by_Order_per_location 

# prepare data: unique species per location × host_order (within the two classes)
prop_df <- Corals_clean %>%
  filter(!is.na(location),
         !is.na(host_order),
         !is.na(host_species),
         host_class %in% c("Hexacorallia", "Octocorallia")) %>%   # remove this line if you want all classes
  group_by(location, host_order) %>%
  summarise(n_species = n_distinct(host_species), .groups = "drop") %>%
  # ensure the three locations are present and ordered
  mutate(location = factor(location, levels = c("Hawaii", "Sri Lanka", "Curaçao"))) %>%
  filter(!is.na(location)) %>%
  group_by(location) %>%
  mutate(prop = n_species / sum(n_species)) %>%
  ungroup()

# optional: show table to confirm proportions
print(prop_df %>% arrange(location, desc(prop)))

# 100% stacked bar chart
ggplot(prop_df, aes(x = location, y = prop, fill = host_order)) +
  geom_col(position = "fill", width = 0.6) +            # position="fill" makes it 100% stacked
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  scale_fill_brewer(palette = "Set3", name = "Host Order") +
  labs(
    title = "Proportion of Unique Corals Species by Order per location",
    x = "Location",
    y = "Proportion of unique species"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.title = element_text(size = 12),
    axis.text = element_text(size = 11),
    legend.title = element_text(size = 11),
    legend.text = element_text(size = 10)
  )
```

```{r}
#| label: species_richness_per_phylum 

# Overall species richness per host phylum (exclude NA)
phylum_richness <- Corals_clean %>%
  filter(!is.na(host_phylum)) %>%
  group_by(host_phylum) %>%
  summarise(Richness = n_distinct(host_species), .groups = "drop")

# Bar plot, sorted by richness
ggplot(phylum_richness, aes(x = fct_reorder(host_phylum, Richness), 
                            y = Richness, fill = host_phylum)) +
  geom_col() +
  scale_fill_brewer(palette = "Dark2") +  # new distinct color palette
  labs(title = "Species Richness per Phylum",
       x = "Phylum",
       y = "Number of Unique Species") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.title = element_text(size = 14),
    axis.text  = element_text(size = 12),
    legend.position = "none"
  )
```

```{r}
#| label: Species_Richness_by_Symbiont_Potential

# Overall species richness per symbiont potential (exclude NA)
symbiont_richness <- Corals_clean %>%
  filter(!is.na(symbiont.potential)) %>%
  group_by(symbiont.potential) %>%
  summarise(Richness = n_distinct(host_species), .groups = "drop")

# Coral-inspired colors (warm pinks, oranges, reds)
coral_colors <- c("#FF7F50", "#FF6347", "#E9967A")

# Bar plot
ggplot(symbiont_richness, aes(x = symbiont.potential, 
                              y = Richness, 
                              fill = symbiont.potential)) +
  geom_col() +
  scale_fill_manual(values = coral_colors) +
  labs(title = "Species Richness by Symbiont Potential",
       x = "Symbiont Potential",
       y = "Number of Unique Species") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.title = element_text(size = 14),
    axis.text  = element_text(size = 12),
    legend.position = "none"
  )
```

```{r}
#| label: coral_only_symbiont_potential_richness

# Pooled richness per symbiont potential (only Hexacorallia & Octocorallia)
richness_symb <- Corals_clean %>%
  filter(!is.na(symbiont.potential),
         !is.na(host_class),
         host_class %in% c("Hexacorallia", "Octocorallia"),
         !is.na(host_species)) %>%
  group_by(symbiont.potential) %>%
  summarise(Richness = n_distinct(host_species), .groups = "drop") %>%
  arrange(desc(Richness))

# Order bars by richness
richness_symb <- richness_symb %>%
  mutate(symbiont.potential = factor(symbiont.potential, levels = richness_symb$symbiont.potential))

# Bar plot
ggplot(richness_symb, aes(x = symbiont.potential, y = Richness, fill = symbiont.potential)) +
  geom_col(width = 0.7) +
  scale_fill_brewer(palette = "Set2") +
  labs(
    title = "Coral Species Richness by Symbiont Potential",
    x = "Symbiont Potential",
    y = "Number of Unique Coral species"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.title  = element_text(size = 14),
    axis.text   = element_text(size = 12),
    legend.position = "none"
  )
```

```{r}
#| label: unique_aposymbiotic_species_corals

# Unique aposymbiotic species within Hexacorallia & Octocorallia, with phylum + genus
aposymbiotic_species <- Corals_clean %>%
  filter(symbiont.potential == "Aposymbiotic",
         !is.na(host_species)) %>%
  distinct(host_phylum, host_class, host_genus, host_species) %>%
  arrange(host_phylum, host_class, host_genus, host_species)

aposymbiotic_species
```

```{r}
#| label: Species_Richness_by_Bleaching_Status

richness_bleaching <- Corals_clean %>%
  filter(!is.na(bleaching),
         !is.na(host_species),
         host_class %in% c("Hexacorallia", "Octocorallia")) %>%
  group_by(bleaching) %>%
  summarise(Richness = n_distinct(host_species), .groups = "drop") %>%
  mutate(bleaching = factor(bleaching, levels = c("NB", "Pale", "B")))

# Bar plot
ggplot(richness_bleaching, aes(x = bleaching, y = Richness, fill = bleaching)) +
  geom_col(width = 0.7) +
  scale_fill_brewer(palette = "Set2") +
  scale_x_discrete(labels = c(
    "NB"   = "Non-bleaching",
    "Pale" = "Pale",
    "B"    = "Bleaching"
  )) +
  labs(
    title = "Richness of Corals by Bleaching Status",
    x = "Bleaching Status",
    y = "Number of Unique Coral species"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.title  = element_text(size = 14),
    axis.text   = element_text(size = 12),
    legend.position = "none"
  )
```

## Entropy Graphs

```{r}
#| label: coral_entropy_by_location

# Shannon entropy function
shannon_index <- function(counts) {
  counts <- counts[counts > 0]
  total <- sum(counts)
  p <- counts / total
  -sum(p * log(p))   # natural log
}

# Pooled Shannon entropy per location (Hexacorallia + Octocorallia only)
entropy_location <- Corals_clean %>%
  filter(!is.na(location),
         !is.na(host_species),
         host_class %in% c("Hexacorallia", "Octocorallia")) %>%
  count(location, host_species, name = "abundance") %>%
  group_by(location) %>%
  summarise(
    Richness = n_distinct(host_species),
    Shannon  = shannon_index(abundance),
    .groups  = "drop"
  ) %>%
  mutate(location = factor(location, levels = c("Hawaii", "Sri Lanka", "Curaçao")))

# Print table
entropy_location

# Bar plot
ggplot(entropy_location, aes(x = location, y = Shannon, fill = location)) +
  geom_col(width = 0.7) +
  scale_fill_brewer(palette = "Pastel1") +
  labs(title = "Coral Entropy by Location",
       x = "Location",
       y = "Shannon Diversity") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.title = element_text(size = 14),
    axis.text  = element_text(size = 12),
    legend.position = "none"
  )

```

```{r}
#| label: entropy_location

# Shannon index function
shannon_index <- function(counts) {
  p <- counts / sum(counts)
  p <- p[p > 0]
  -sum(p * log(p))
}

# Calculate Shannon diversity per location (no sample_id)
shannon_df <- Corals_clean %>%
  filter(!is.na(location), !is.na(host_species)) %>%
  group_by(location, host_species) %>%
  summarise(Count = n(), .groups = "drop") %>%
  group_by(location) %>%
  summarise(Shannon = shannon_index(Count), .groups = "drop") %>%
  ungroup()

# Bar plot (one bar per location, no error bars since it's a single value)
ggplot(shannon_df, aes(x = factor(location, levels = c("Hawaii", "Sri Lanka", "Curaçao")),
                       y = Shannon, fill = location)) +
  geom_col() +
  scale_fill_brewer(palette = "Pastel1") +
  labs(title = "Entropy by Location",
       x = "Location",
       y = "Shannon Diversity Index (Entropy)") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.title = element_text(size = 14),
    axis.text  = element_text(size = 12),
    legend.position = "none"
  )
```

```{r}
#| label: entropy_symbiont_potential

# Shannon index function
shannon_index <- function(counts) {
  p <- counts / sum(counts)
  p <- p[p > 0]
  -sum(p * log(p))
}

# Calculate Shannon diversity per symbiont potential (pooled, no sample_id)
shannon_df <- Corals_clean %>%
  filter(!is.na(symbiont.potential), !is.na(host_species)) %>%
  count(symbiont.potential, host_species, name = "Count") %>%
  group_by(symbiont.potential) %>%
  summarise(Shannon = shannon_index(Count), .groups = "drop")

# Bar plot (one value per symbiont potential, no error bars since pooled)
ggplot(shannon_df, aes(x = symbiont.potential, y = Shannon, fill = symbiont.potential)) +
  geom_col() +
  scale_fill_brewer(palette = "Set2") +
  labs(title = "Entropy by Symbiont Potential",
       x = "Symbiont Potential",
       y = "Shannon Diversity Index (Entropy)") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.title = element_text(size = 14),
    axis.text  = element_text(size = 12),
    legend.position = "none"
  )

```

```{r}
#| label: entropy_bleaching

# Shannon index function
shannon_index <- function(counts) {
  p <- counts / sum(counts)
  p <- p[p > 0]
  -sum(p * log(p))
}

# Calculate Shannon diversity per bleaching category (pooled, no sample_id)
shannon_df <- Corals_clean %>%
  filter(!is.na(bleaching), !is.na(host_species)) %>%
  count(bleaching, host_species, name = "Count") %>%
  group_by(bleaching) %>%
  summarise(Shannon = shannon_index(Count), .groups = "drop")

# Bar plot (one Shannon value per bleaching status)
ggplot(shannon_df, aes(x = bleaching, y = Shannon, fill = bleaching)) +
  geom_col() +
  scale_fill_brewer(palette = "Set3") +
  scale_x_discrete(labels = c(
    "NB"   = "Non-bleaching",
    "B"    = "Bleaching",
    "Pale" = "Pale"
  )) +
  labs(title = "Entropy by Bleaching Status",
       x = "Bleaching Status",
       y = "Shannon Diversity Index (Entropy)") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.title = element_text(size = 14),
    axis.text  = element_text(size = 12),
    legend.position = "none"
  )
```

## Evenness Graphs

```{r}
#| label: Pooled_Coral_Evenness_by_Location

# Shannon function
shannon_index <- function(counts) {
  counts <- counts[counts > 0]
  total <- sum(counts)
  p <- counts / total
  -sum(p * log(p))
}

# Pooled Shannon + Evenness per location
evenness_pooled <- Corals_clean %>%
  filter(!is.na(location),
         !is.na(host_species),
         host_class %in% c("Hexacorallia", "Octocorallia")) %>%
  count(location, host_species, name = "abundance") %>%
  group_by(location) %>%
  summarise(
    Richness = n_distinct(host_species),
    Shannon  = shannon_index(abundance),
    .groups  = "drop"
  ) %>%
  mutate(Evenness = ifelse(Richness > 1, Shannon / log(Richness), 0),
         location = factor(location, levels = c("Hawaii", "Sri Lanka", "Curaçao")))

# Print table to console
evenness_pooled

# Plot
ggplot(evenness_pooled, aes(x = location, y = Evenness, fill = location)) +
  geom_col(width = 0.7) +
  scale_fill_brewer(palette = "Pastel1") +
  labs(title = "Coral Evenness by Location",
       x = "Location",
       y = "Evenness (H' / ln(S))") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.title = element_text(size = 14),
    axis.text  = element_text(size = 12),
    legend.position = "none"
  )

```

```{r}
#| label: Coral_evenness_by_synbiont_potential

# Shannon function
shannon_index <- function(counts) {
  counts <- counts[counts > 0]
  total <- sum(counts)
  p <- counts / total
  -sum(p * log(p))
}

# Pooled Shannon + Evenness per symbiont.potential
evenness_symb <- Corals_clean %>%
  filter(!is.na(symbiont.potential),
         !is.na(host_species),
         host_class %in% c("Hexacorallia", "Octocorallia")) %>%
  count(symbiont.potential, host_species, name = "abundance") %>%
  group_by(symbiont.potential) %>%
  summarise(
    Richness = n_distinct(host_species),
    Shannon  = shannon_index(abundance),
    .groups  = "drop"
  ) %>%
  mutate(Evenness = ifelse(Richness > 1, Shannon / log(Richness), 0))

# Print table
evenness_symb

# Plot
ggplot(evenness_symb, aes(x = symbiont.potential, y = Evenness, fill = symbiont.potential)) +
  geom_col(width = 0.7) +
  scale_fill_brewer(palette = "Set2") +
  labs(title = "Coral Evenness by Symbiont Potential",
       x = "Symbiont Potential",
       y = "Evenness (H' / ln(S))") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.title = element_text(size = 14),
    axis.text  = element_text(size = 12),
    legend.position = "none"
  )

```
